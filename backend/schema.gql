# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Club {
  id: ID!
  location: String!
  name: String!
}

type Competition {
  endDate: Timestamp!
  grounds: Int!
  id: ID!
  location: String!
  logo: String
  modules: [String!]!
  name: String!
  startDate: Timestamp!
  stats: CompetitionStats!
}

type CompetitionStats {
  clubs: Int!
  grades: Int!
  starters: Int!
}

input CreateClubInput {
  location: String!
  name: String!
}

input CreateCompetitionInput {
  endDate: Timestamp!
  grounds: Int! = 1
  location: String!
  modules: [String!]! = []
  name: String!
  startDate: Timestamp!
}

input CreateEGTDivisionInput {
  category: Int!
  competitionID: ID!
  ground: Int!
  sex: Sex!
}

input CreateStarterInput {
  birthyear: Int!
  firstname: String!
  lastname: String!
  sex: Sex!
  stvID: String
}

input CreateStarterLinkInput {
  clubID: ID!
  competitionID: ID!
  starterID: ID!
}

input CreateUserInput {
  email: String!
  language: String!
  password: String!
}

type EGTCategorySettings {
  category: Int!
  coverPage: String
  honourPrecentage: Int!
  sex: Sex!
}

input EGTCategorySettingsInput {
  category: Int!
  coverPage: String
  honourPrecentage: Int!
  sex: Sex!
}

type EGTDevice {
  aggregationMode: EGTDeviceAggregationMode!
  deviceNumber: Int!
  id: ID!
  inputs: Int!
  overrides: [EGTDeviceOverride!]!
}

enum EGTDeviceAggregationMode {
  AVG
  MAX
  MIN
  NONE
}

type EGTDeviceOverride {
  aggregationMode: EGTDeviceAggregationMode!
  category: Int!
  inputs: Int!
}

type EGTDivision {
  category: Int!
  currentRound: Int!
  ground: Int!
  id: ID!
  lastStateTransition: Timestamp
  lineups: [EGTLineup!]!
  number: Int!
  sex: Sex!
  starters: StarterLink!
  state: EGTDivisionStates!
  totalRounds: Int!
  totalStarters: Int!
}

input EGTDivisionFilterInput {
  category: Int
  competitionID: ID!
  ground: Int
  ids: [ID!]
  sex: Sex
  state: EGTDivisionStates
}

enum EGTDivisionStates {
  ENDED
  PENDING
  RUNNING
}

type EGTJudgingDevice {
  device: EGTDevice!
  lineups: [EGTLineup!]!
  round: Int!
  starterslist: [EGTStarterLink!]!
}

type EGTLineup {
  currentRound: Int!
  device: EGTDevice!
  id: ID!
  starterlinks: [EGTStarterLink!]!
}

type EGTSettings {
  categorySettings: [EGTCategorySettings!]!
  id: ID!
}

input EGTSettingsInput {
  categorySettings: [EGTCategorySettingsInput!]!
  id: ID
}

type EGTStarterLink {
  category: Int
  division: EGTDivision
  id: ID!
  isDeleted: Boolean!
  lineup: EGTLineup
  starterlink: StarterLink!
}

input EGTStarterLinkInput {
  category: Int
  divisionID: ID
  divisionNumber: Int
  id: ID
  lineupID: ID
  starterLinkID: ID
}

type EGTStarterRanking {
  award: String!
  egtStarterlink: EGTStarterLink!
  grades: [Grade!]!
  rank: Int!
  total: Float!
}

type Grade {
  deviceNumber: Int!
  id: ID!
  starterlink: StarterLink!
  value: Float!
}

input GradeInput {
  deviceNumber: Int!
  module: String!
  starterlinkId: ID!
  value: Float!
}

type Judgetoken {
  device: Int!
  ground: Int!
  id: ID!
  token: String!
}

type Mutation {
  addGrades(grades: [GradeInput!]!): [Grade!]!
  competitionLogo(id: ID!, logo: Upload!): Competition!
  createClub(data: CreateClubInput!): Club!
  createCompetition(competition: CreateCompetitionInput!): Competition!
  createEgtDivision(data: CreateEGTDivisionInput!): EGTDivision!
  createStarter(data: CreateStarterInput!): Starter!
  createStarterLink(data: CreateStarterLinkInput!): StarterLink!
  createUser(user: CreateUserInput!): User!
  egtCategorySettings(competitionID: ID!, data: EGTCategorySettingsInput!): EGTCategorySettings!
  egtLineupAdvanceRound(id: ID!, override: Boolean = false, round: Int!): EGTLineup!
  egtLineupAdvanceRounds(ids: [ID!]!, override: Boolean = false, round: Int!): [EGTLineup!]!
  egtSettings(competitionID: ID, data: EGTSettingsInput!): EGTSettings!
  egtStarterLink(data: EGTStarterLinkInput!, ignoreDivision: Boolean = false): EGTStarterLink!
  removeEgtDivision(id: ID!): EGTDivision!
  removeStarterLink(id: ID!): StarterLink!
  resetJudgeToken(id: ID!): Judgetoken!
  updateCompetition(data: UpdateCompetitionInput!, id: ID!): Competition!
  updateEgtDivisionState(data: UpdateEGTDivisionStateInput!): EGTDivision!
  updateStarter(data: UpdateStarterInput!, id: ID!): Starter!
  updateStarterLink(data: UpdateStarterLinkInput!, id: ID!): StarterLink!
  updateUser(data: UpdateUserInput!): User!
  upsertStarterLink(data: CreateStarterLinkInput!): StarterLink!
}

type Query {
  clubs: [Club!]!
  competition(id: ID!): Competition!
  competitions: [Competition!]!
  currentUser: User
  egtCategorySettings(category: Int!, competitionID: ID!, sex: Sex!): EGTCategorySettings!
  egtDevices(competitionID: ID!): [EGTDevice!]!
  egtDivision(id: ID!): EGTDivision
  egtDivisions(filter: EGTDivisionFilterInput!): [EGTDivision!]!
  egtJudgingDevice(device: Int!, ids: [ID!]!, round: Int!): EGTJudgingDevice!
  egtJudgingDevices(ids: [ID!]!, round: Int!): [EGTJudgingDevice!]!
  egtLineup(id: ID!): EGTLineup
  egtSettings(competitionID: ID!): EGTSettings!
  egtStarterLink(id: ID, starterLinkID: ID): EGTStarterLink
  egtStarterLinkUnassigned(divisionID: ID!): [EGTStarterLink!]!
  egtStarterLinks(ids: [ID!]!, withDeleted: Boolean = false): [EGTStarterLink!]!
  egtStarterRankings(category: Int!, competitionID: ID!, sex: Sex!): [EGTStarterRanking!]!
  findJudgeToken(competitionID: ID!, create: Boolean! = false, device: Int!, ground: Int!): Judgetoken
  grades: [Grade!]!
  judgeToken(id: Int!): Judgetoken!
  starterGrades(device: Int, starterlinkIds: [ID!]!): [Grade!]!
  starterLink(id: ID!): StarterLink
  starterLinks(competitionID: ID!, sex: String): [StarterLink!]!
  starters(filter: StarterFilter!): [Starter!]!
  users: [User!]!
}

enum Roles {
  ADMIN
  JUDGE
  STARTER
  VIEWER
}

enum Sex {
  FEMALE
  MALE
}

type Starter {
  birthyear: Int!
  firstname: String!
  id: ID!
  lastname: String!
  sex: Sex!
  starterLinks: [StarterLink!]!
  stvID: String
}

input StarterFilter {
  competitionID: ID
  firstname: String
  lastname: String
  sex: Sex
  stvID: String
}

type StarterLink {
  club: Club!
  competition: Competition!
  egt: EGTStarterLink
  id: ID!
  isDeleted: Boolean!
  starter: Starter!
}

type Subscription {
  egtDivision(filter: EGTDivisionFilterInput!): EGTDivision!
  egtStarterLinks(ids: [ID!]!): EGTStarterLink!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpdateCompetitionInput {
  deleteLogo: Boolean! = false
  endDate: Timestamp
  grounds: Int = 1
  location: String
  modules: [String!]
  name: String
  startDate: Timestamp
}

input UpdateEGTDivisionStateInput {
  currentRound: Int!
  id: ID!
  state: EGTDivisionStates!
}

input UpdateStarterInput {
  birthyear: Int
  firstname: String
  lastname: String
  sex: Sex
  stvID: String
}

input UpdateStarterLinkInput {
  clubID: ID!
  competitionID: ID!
}

input UpdateUserInput {
  email: String!
  id: ID!
  language: String!
}

"""Upload files"""
scalar Upload

type User {
  email: String!
  globalRole: Roles!
  id: ID!
  language: String!
}