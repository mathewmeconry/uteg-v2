# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Club {
  id: ID!
  location: String!
  name: String!
}

type Competition {
  endDate: Timestamp!
  grounds: Int!
  id: ID!
  location: String!
  modules: [String!]!
  name: String!
  startDate: Timestamp!
}

input CreateClubInput {
  location: String!
  name: String!
}

input CreateCompetition {
  endDate: Timestamp!
  grounds: Int! = 1
  location: String!
  modules: [String!]! = []
  name: String!
  startDate: Timestamp!
}

input CreateEGTDivisionInput {
  category: Int!
  competitionID: ID!
  ground: Int!
  sex: Sex!
}

input CreateStarterInput {
  birthyear: Int!
  firstname: String!
  lastname: String!
  sex: Sex!
  stvID: String
}

input CreateStarterLinkInput {
  clubID: ID!
  competitionID: ID!
  starterID: ID!
}

input CreateUserInput {
  email: String!
  password: String!
}

type EGTDivision {
  category: Int!
  currentRound: Int!
  ground: Int!
  id: ID!
  number: Int!
  round: Int!
  sex: Sex!
  starters: StarterLink!
  state: EGTDivisionStates!
  totalRounds: Int!
}

input EGTDivisionFilterInput {
  category: Int
  competitionID: ID!
  sex: Sex
}

enum EGTDivisionStates {
  ENDED
  PENDING
  RUNNING
}

type EGTStarterLink {
  category: Int
  division: EGTDivision
  id: ID!
}

input EGTStarterLinkInput {
  category: Int
  divisionID: ID
  divisionNumber: Int
  starterLinkID: ID!
}

type Grade {
  id: ID!
  starter: StarterLink!
  value: Float!
}

type Mutation {
  createClub(data: CreateClubInput!): Club!
  createCompetition(competition: CreateCompetition!): Competition!
  createEgtDivision(data: CreateEGTDivisionInput!): EGTDivision!
  createStarter(data: CreateStarterInput!): Starter!
  createStarterLink(data: CreateStarterLinkInput!): StarterLink!
  createUser(user: CreateUserInput!): User!
  egtStarterLink(data: EGTStarterLinkInput!): EGTStarterLink!
  removeEgtDivision(id: ID!): EGTDivision!
  removeStarterLink(id: ID!): StarterLink!
  updateStarter(data: UpdateStarterInput!, id: ID!): Starter!
  updateStarterLink(data: UpdateStarterLinkInput!, id: ID!): StarterLink!
}

type Query {
  clubs: [Club!]!
  competition(id: ID!): Competition!
  competitions: [Competition!]!
  egtDivisions(filter: EGTDivisionFilterInput!): [EGTDivision!]!
  egtStarterLink(id: ID, starterLinkID: ID): EGTStarterLink
  grades: [Grade!]!
  starterLink(id: ID!): StarterLink
  starterLinks(competitionID: ID!, sex: String): [StarterLink!]!
  starters(filter: StarterFilter!): [Starter!]!
  users: [User!]!
}

enum Roles {
  ADMIN
  JUDGE
  STARTER
  VIEWER
}

enum Sex {
  FEMALE
  MALE
}

type Starter {
  birthyear: Int!
  firstname: String!
  id: ID!
  lastname: String!
  sex: Sex!
  starterLinks: [StarterLink!]!
  stvID: String
}

input StarterFilter {
  competitionID: ID
  firstname: String
  lastname: String
  sex: Sex
  stvID: String
}

type StarterLink {
  club: Club!
  competition: Competition!
  egt: EGTStarterLink
  id: ID!
  starter: Starter!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpdateStarterInput {
  birthyear: Int
  firstname: String
  lastname: String
  sex: Sex
  stvID: String
}

input UpdateStarterLinkInput {
  clubID: ID!
  competitionID: ID!
}

type User {
  email: String!
  globalRole: Roles!
  id: ID!
}